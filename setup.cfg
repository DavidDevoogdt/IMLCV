# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = IMLCV
description = Add a short description here!
author = David Devoogdt
author_email = david.devoogdt@gmail.com
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/pyscaffold/pyscaffold/
# Add here related links, for example:
project_urls =
    Documentation = https://pyscaffold.org/
#    Source = https://github.com/pyscaffold/pyscaffold/
#    Changelog = https://pyscaffold.org/en/latest/changelog.html
#    Tracker = https://github.com/pyscaffold/pyscaffold/issues
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Download = https://pypi.org/project/PyScaffold/#files
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
# python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.


jax = "*"
numpy = "*"
parsl = "*"
keras = "*"
# yaff = {git = "https://github.com/molmod/yaff.git" }
cloudpickle = "*"
matplotlib = "*"
molmod = "*"
scipy = "*"
jax_dataclasses = "*"
optax = "*"
flax = "*"
umap-learn = "*"
h5py = "*"
numba = "*"
shapely = "*"
alphashape = "*"
ase = "*"
scikit-learn = "*"
nyx = "*"
filelock = "*"
distrax = "*"
jaxopt = "*"
ott-jax = "*"
pymanopt = "^2.1.1"
thermolib = {git = "https://github.ugent.be/lvduyfhu/ThermoLIB", branch = "david"}
netket = "*"

tensorflow = { version = "*", optional = true }
tensorrt = { version = "*", optional = true }
# [tool.poetry.group.test.dependencies]

pytest = { version = "*", optional = true }
pytest-cov ={version = "*", optional = true }
mpi4py ={ version = "*", optional = true }
# zipfile ={ version = "*", optional = true }

mypy = { version = "*", optional = true }
black = { version = "*", optional = true }
isort = { version = "*", optional = true }
flake8 = { version = "*", optional = true }
shed = { version = "*", optional = true }

sphinx = { version = "*", optional = true }
sphinx-book-theme = { version = "*", optional = true }
sphinx_design = { version = "*", optional = true }
sphinx-autoapi = { version = "*", optional = true }
sphinx-autodoc-typehints = { version = "*", optional = true }
myst-parser = { version = "*", optional = true }


[tool.poetry.extras]

test = [ "pytest","pytest-cov","mpi4py"  ] 
docs = [ "sphinx", "sphinx-book-theme", "sphinx_design", "sphinx-autoapi", "sphinx-autodoc-typehints", "myst-parser" ]
lint = [ "mypy", "black", "isort", "flake8", "shed" ]
tensorflow = [ "tensorflow","tensorrt" ]

install_requires =
    importlib-metadata; python_version<"3.8"
    jax
    numpy
    parsl
    keras
    cloudpickle
    matplotlib
    molmod
    scipy
    jax_dataclasses
    optax
    flax
    umap-learn
    h5py
    numba
    shapely
    alphashape
    ase
    scikit-learn
    nyx
    filelock
    distrax
    jaxopt
    ott-jax
    pymanopt
    thermolib
    netket


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install IMLCV[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
test =
    setuptools
    pytest
    pytest-cov
    mpi4py

lint =
    mypy
    black
    isort
    flake8
    shed

doc = 
    sphinx
    sphinx-book-theme
    sphinx_design
    sphinx-autoapi
    sphinx-autodoc-typehints
    myst-parser 




[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = imlcv.module:function
# For example:
# console_scripts =
#     fibonacci = imlcv.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov imlcv --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.4.1
package = imlcv
